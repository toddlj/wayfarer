name: Build and publish

on:
  workflow_run:
    workflows: ["Test"]
    branches: [main]
    types:
      - completed

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23.6'

      - name: Install dependencies
        run: |
          go mod tidy

      - name: Ensure go.mod and go.sum are up to date
        run: |
          git diff --exit-code go.mod go.sum || (echo "go.mod or go.sum has changed, please review your dependencies" && exit 1)

      - name: Build Go binary
        run: |
          GOARCH=amd64 GOOS=linux go build -o wayfarer ./cmd/wayfarer/main.go

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wayfarer-binary
          path: wayfarer
          if-no-files-found: 'error'

      - name: Generate release tag
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')

          if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.1"
          else
            NEW_VERSION=$(( ${LATEST_TAG#v0.} + 1 ))
            NEW_TAG="v0.$NEW_VERSION"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Push new tag
        run: |
          git fetch --tags
          if git tag -l | grep -q "^${NEW_TAG}$"; then
            echo "Tag $NEW_TAG already exists. Skipping..."
            exit 0
          fi
          
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          fail_on_unmatched_files: true
          files: wayfarer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_IMAGE_NAME }}:latest \
            -t ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_IMAGE_NAME }}:${{env.NEW_TAG}} \
            .

      - name: Push Docker image
        run: |
          docker push ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_IMAGE_NAME }}:latest
          docker push ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_IMAGE_NAME }}:${{env.NEW_TAG}}